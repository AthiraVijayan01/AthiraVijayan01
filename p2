#include <stdio.h>

// Structure to represent a process
typedef struct {
    int pid;       // Process ID
    int burstTime; // Burst Time
    int arrivalTime; // Arrival Time
    int waitingTime; // Waiting Time
    int turnaroundTime; // Turnaround Time
} Process;

// Function to calculate waiting and turnaround times
void calculateTimes(Process processes[], int n) {
    int currentTime = 0;
    for (int i = 0; i < n; i++) {
        // Waiting time is the current time minus the arrival time
        processes[i].waitingTime = currentTime - processes[i].arrivalTime;
        
        // Turnaround time is the waiting time plus the burst time
        processes[i].turnaroundTime = processes[i].waitingTime + processes[i].burstTime;
        
        // Update the current time to the completion of the current process
        currentTime += processes[i].burstTime;
    }
}

// Function to display the results
void displayResults(Process processes[], int n) {
    float totalWaitingTime = 0, totalTurnaroundTime = 0;
    
    printf("\nProcess\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\n", 
               processes[i].pid, 
               processes[i].burstTime, 
               processes[i].arrivalTime, 
               processes[i].waitingTime, 
               processes[i].turnaroundTime);
        
        totalWaitingTime += processes[i].waitingTime;
        totalTurnaroundTime += processes[i].turnaroundTime;
    }
    
    printf("\nAverage Waiting Time: %.2f\n", totalWaitingTime / n);
    printf("Average Turnaround Time: %.2f\n", totalTurnaroundTime / n);
}

int main() {
    int n;
    
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    
    Process processes[n];
    
    // Input burst times and arrival times for each process
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter burst time for process P%d: ", processes[i].pid);
        scanf("%d", &processes[i].burstTime);
        printf("Enter arrival time for process P%d: ", processes[i].pid);
        scanf("%d", &processes[i].arrivalTime);
    }
    
    // Sort processes by arrival time
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].arrivalTime > processes[j].arrivalTime) {
                Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }
    
    // Calculate waiting and turnaround times
    calculateTimes(processes, n);
    
    // Display the results
    displayResults(processes, n);
    
    return 0;
}
